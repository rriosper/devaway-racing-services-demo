{"version":3,"sources":["components/Avatar.tsx","components/Card.tsx","components/Layout.tsx","components/Spinner.tsx","components/Splash.tsx","scenes/NotFound.tsx","scenes/components/styles.ts","scenes/components/Racers.tsx","scenes/RacerDetail/RacerDetail.tsx","domain/racer.ts","services/local/racer.ts","services/index.ts","services/local/index.ts","scenes/Ranking/useRankings.ts","scenes/Ranking/Ranking.tsx","scenes/Scenes.tsx","theme/GlobalStyle.ts","theme/values/index.ts","theme/values/borders.ts","theme/values/breakpoints.ts","theme/values/colors.ts","theme/values/fontSizes.ts","theme/values/fontWeights.ts","theme/values/shadows.ts","theme/values/sizes.ts","theme/values/space.ts","theme/values/transitions.ts","theme/values/zIndices.ts","theme/Theme.tsx","App.tsx","index.tsx"],"names":["Avatar","styled","img","variant","prop","default","variants","sm","css","md","lg","Card","div","padding","margin","gridTemplateColumns","gridTemplateRows","gridGap","justifyContent","alignItems","defaultProps","SCardFieldsWrapper","SCardField","CardFields","fields","fieldsComponent","useMemo","map","label","value","SLayout","up","Layout","title","subTitle","children","spinnerAnimation","keyframes","Spinner","justifySelf","marginBottom","marginLeft","marginRight","marginTop","SSplash","motion","SImage","Splash","useState","isActive","setIsActive","animate","opacity","transition","duration","ease","onAnimationComplete","alt","src","boxShadow","transform","NotFound","Title","ChampionshipTitle","p","RacersLayout","ViewRacerButton","button","Racer","PropTypes","string","isRequired","number","arrayOf","shape","name","time","picture","age","team","races","content","bestTimeRace","reduce","acc","race","length","getBestTimeRace","display","Racers","racers","isLoading","history","useHistory","racersComponent","_id","racer","onClick","push","RacerDetail","RaceDecoder","JsonDecoder","object","RacerDecoder","array","RacersDecoder","delay","seconds","Promise","res","setTimeout","makeFetch","origin","resource","decoder","a","fetch","response","json","data","decode","isOk","type","reason","error","makeRacerFetch","services","local","getAll","getById","INITIA_STATE","loading","useRankings","useLocalStorage","state","setState","mergeState","useCallback","newPartialState","currState","mergeDeepLeft","useEffect","then","catch","err","Ranking","Scenes","exact","path","component","GlobalStyle","createGlobalStyle","normalize","values","borders","thin","solid","thick","xthick","breakpoints","xs","xl","colors","text","bg","card","primary","foreground","foregroundBorder","gold","silver","bronze","fontSizes","0","1","2","3","4","5","fontWeights","regular","bold","shadows","smooth","sizes","xxs","xxl","space","none","transitions","fast","slow","zIndices","splash","Theme","node","theme","themeValues","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b3d889c.chunk.js","sourcesContent":["import styled, { css } from '@xstyled/styled-components';\nimport { variant } from '@xstyled/system';\n\ntype AvatarProps = {\n  size?: 'sm' | 'md' | 'lg';\n};\n\nconst Avatar = styled.img<AvatarProps>`\n  border-radius: 50%;\n  background-color: foregroundBorder;\n  ${variant({\n    prop: 'size',\n    default: 'md',\n    variants: {\n      sm: css`\n        width: md;\n        height: md;\n      `,\n      md: css`\n        width: lg;\n        height: lg;\n      `,\n      lg: css`\n        width: xl;\n        height: xl;\n      `,\n    },\n  })}\n`;\n\nexport default Avatar;\n","import styled from '@xstyled/styled-components';\nimport {\n  alignItems,\n  gridGap,\n  gridTemplateColumns,\n  gridTemplateRows,\n  justifyContent,\n  margin,\n  padding,\n} from '@xstyled/system';\nimport React, { useMemo } from 'react';\n\nimport { ThemeSchema } from '../theme';\n\n// Card\ntype CardProps = {\n  padding?: ThemeSchema['space'];\n  margin?: ThemeSchema['space'];\n  gridTemplateColumns?: string;\n  gridTemplateRows?: string;\n  gridGap?: string;\n  justifyContent?: string;\n  alignItems?: string;\n};\n\nexport const Card = styled.div<CardProps>`\n  ${padding}\n  ${margin}\n  ${gridTemplateColumns}\n  ${gridTemplateRows}\n  ${gridGap}\n  ${justifyContent}\n  ${alignItems}\n  background-color: card;\n  box-shadow: card;\n  display: grid;\n`;\n\nCard.defaultProps = {\n  padding: 'md',\n};\n\n// CardField\ntype CardFieldsProps = {\n  fields: Array<{\n    label: string;\n    value: Nullable<string | number>;\n  }>;\n};\n\nconst SCardFieldsWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-row-gap: md;\n  grid-column-gap: sm;\n`;\n\nconst SCardField = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  > div {\n    font-weight: bold;\n    color: foreground;\n    text-trasnform: lowercase;\n    margin-bottom: xs;\n\n    :first-letter {\n      text-transform: uppercase;\n    }\n  }\n`;\n\nexport const CardFields: React.FC<CardFieldsProps> = ({ fields }) => {\n  const fieldsComponent = useMemo(\n    () => fields.map(({ label, value }) => (\n      <SCardField key={label}>\n        <div>{label}</div>\n        <span>{value}</span>\n      </SCardField>\n    )),\n    [fields],\n  );\n  return <SCardFieldsWrapper>{fieldsComponent}</SCardFieldsWrapper>;\n};\n","import styled, { css } from '@xstyled/styled-components';\nimport { up } from '@xstyled/system';\nimport React from 'react';\n\nconst SLayout = styled.div`\n  padding-left: lg;\n  padding-right: lg;\n  padding-bottom: md;\n  width: 100%;\n  height: 100%;\n\n  ${up(\n    'lg',\n    css`\n      padding-left: 0;\n      padding-right: 0;\n      max-width: 1180px;\n      margin: 0 auto;\n    `,\n  )}\n`;\n\ntype LayoutProps = {\n  title: React.ReactNode;\n  subTitle: React.ReactNode;\n  children: React.ReactNode;\n};\n\nconst Layout: React.FC<LayoutProps> = ({ title, subTitle, children }) => (\n  <SLayout>\n    {title}\n    {subTitle}\n    {children}\n  </SLayout>\n);\n\nexport default Layout;\n","import styled, { keyframes } from '@xstyled/styled-components';\nimport {\n  justifySelf,\n  margin,\n  marginBottom,\n  marginLeft,\n  marginRight,\n  marginTop,\n} from '@xstyled/system';\n\nconst spinnerAnimation = keyframes`\n  from {\n    transform: rotateZ(0deg);\n  }\n\n  to {\n    transform: rotateZ(360deg);\n  }\n`;\n\ntype SpinnerProps = {\n  justifySelf?: string;\n  margin?: string;\n  marginBottom?: string;\n  marginLeft?: string;\n  marginRight?: string;\n  marginTop?: string;\n};\n\nconst Spinner = styled.div<SpinnerProps>`\n  width: md;\n  height: md;\n  border: thick;\n  border-color: primary;\n  border-top-color: bg;\n  border-radius: 100%;\n  animation: ${spinnerAnimation};\n  animation-duration: 1.3s;\n  animation-iteration-count: infinite;\n  animation-timing-function: ease-in-out;\n  ${justifySelf}\n  ${margin}\n  ${marginBottom}\n  ${marginLeft}\n  ${marginRight}\n  ${marginTop}\n`;\n\nexport default Spinner;\n","import styled, { css } from '@xstyled/styled-components';\nimport React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { up } from '@xstyled/system';\n\nconst SSplash = styled(motion.div)`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: splash;\n  width: 100%;\n  height: 100%;\n  background: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst SImage = styled(motion.img)`\n  width: 80px;\n  height: 80px;\n\n  ${up(\n    'sm',\n    css`\n      width: 150px;\n      height: 150px;\n    `,\n  )}\n`;\n\nconst Splash: React.FC = () => {\n  const [isActive, setIsActive] = useState(true);\n  return isActive ? (\n    <SSplash\n      animate={{\n        opacity: [1, 1, 1, 0],\n      }}\n      transition={{ duration: 1.4, ease: 'easeOut' }}\n      onAnimationComplete={() => setIsActive(false)}\n    >\n      <SImage\n        alt=\"DevAway logo\"\n        src=\"/images/devAway.jpeg\"\n        animate={{\n          opacity: [0, 1, 1],\n          boxShadow: ['0 0 20px rgba(0,0,0,0.5)', '0 0 20px rgba(0,0,0,0)'],\n          transform: ['scale(1.1)', 'scale(1)'],\n        }}\n        transition={{ duration: 0.4, ease: 'easeIn' }}\n      />\n    </SSplash>\n  ) : null;\n};\n\nexport default Splash;\n","import React from 'react';\n\nconst NotFound: React.FC = () => <div>Not found</div>;\n\nexport default NotFound;\n","import styled, { css } from '@xstyled/styled-components';\nimport { up } from '@xstyled/system';\n\nexport const Title = styled.div`\n  > h1 {\n    color: primary;\n  }\n`;\n\nexport const ChampionshipTitle = styled.p`\n  font-size: 3;\n`;\n\nexport const RacersLayout = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: md;\n  grid-gap: md;\n  position: relative;\n\n  ${up(\n    'lg',\n    css`\n      grid-template-columns: repeat(2, 1fr);\n    `,\n  )}\n\n  > div:first-child {\n    position: relative;\n    ::before {\n      content: \"#1\";\n      text-shadow: 0px 1px 2px #333;\n      font-size: 5;\n      color: gold;\n      position: absolute;\n      top: -14px;\n      left: -14px;\n    }\n  }\n\n  > div:nth-child(2) {\n    position: relative;\n    ::before {\n      content: \"#2\";\n      text-shadow: 0px 1px 2px #333;\n      font-size: 5;\n      color: silver;\n      position: absolute;\n      top: -14px;\n      left: -14px;\n    }\n  }\n\n  > div:nth-child(3) {\n    position: relative;\n    ::before {\n      content: \"#3\";\n      text-shadow: 0px 1px 2px #333;\n      font-size: 5;\n      color: bronze;\n      position: absolute;\n      top: -14px;\n      left: -14px;\n    }\n  }\n`;\n\nexport const ViewRacerButton = styled.button`\n  width: 100%;\n  padding: md;\n  text-transform: uppercase;\n  cursor: pointer;\n  outline: none;\n  border: none;\n  border-top: thin;\n  border-color: foregroundBorder;\n  transition: fast;\n  font-weight: bold;\n\n  :hover {\n    background-color: primary;\n    color: white;\n  }\n`;\n","import PropTypes, { InferProps } from 'prop-types';\nimport React, { useMemo } from 'react';\n\nimport { Box } from '@xstyled/styled-components';\nimport { useHistory } from 'react-router-dom';\nimport {\n  Avatar, Card, CardFields, Spinner,\n} from '../../components';\nimport { Racer as RacerDomain } from '../../domain';\n\nimport { RacersLayout, ViewRacerButton } from './styles';\n\nconst racerPropTypes = {\n  picture: PropTypes.string.isRequired,\n  age: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  team: PropTypes.string.isRequired,\n  races: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      time: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n\ntype RacerProps = InferProps<typeof racerPropTypes> & {\n  content?: React.ReactElement;\n};\n\nconst getBestTimeRace = (races: RacerProps['races']): string => races.reduce(\n  (acc, race) => (acc.length > 0 && acc <= race.time ? acc : race.time),\n  '',\n);\n\nexport const Racer: React.FC<RacerProps> = ({\n  picture,\n  age,\n  name,\n  team,\n  races,\n  content,\n}) => {\n  const bestTimeRace = useMemo(() => getBestTimeRace(races), [races]);\n  return (\n    <Card gridTemplateRows=\"1fr auto\" padding=\"none\">\n      <Box\n        display=\"grid\"\n        gridTemplateColumns=\"auto 1fr\"\n        gridGap=\"md\"\n        padding=\"md\"\n        alignItems=\"center\"\n      >\n        <Avatar alt={`Profile picture ${name}`} src={picture} />\n        <CardFields\n          fields={[\n            {\n              label: 'name',\n              value: name,\n            },\n            {\n              label: 'age',\n              value: age,\n            },\n            {\n              label: 'team',\n              value: team,\n            },\n            {\n              label: 'Best time',\n              value: bestTimeRace,\n            },\n          ]}\n        />\n      </Box>\n      {content}\n    </Card>\n  );\n};\n\nRacer.propTypes = racerPropTypes;\n\ntype RacersProps = {\n  racers: Array<RacerDomain>;\n  isLoading: boolean;\n};\n\nconst Racers: React.FC<RacersProps> = ({ racers, isLoading }) => {\n  const history = useHistory();\n  const racersComponent = useMemo(\n    () => racers.map(({ _id, ...racer }) => (\n      <Racer\n        key={_id}\n        content={(\n          <ViewRacerButton onClick={() => history.push(`/racer/${_id}`)}>\n            View Racer\n          </ViewRacerButton>\n          )}\n        {...racer}\n      />\n    )),\n    [racers, history],\n  );\n\n  return (\n    <Box display=\"grid\" gridGap=\"md\">\n      <h3>Racers</h3>\n      {isLoading && <Spinner margin=\"md\" justifySelf=\"center\" />}\n      <RacersLayout>{racersComponent}</RacersLayout>\n    </Box>\n  );\n};\n\nexport default Racers;\n","import React from 'react';\n// import { useParams } from 'react-router-dom';\nimport { Layout } from '../../components';\nimport { ChampionshipTitle, Racer, Title } from '../components';\n\n// const { id } = useParams<{ id: string }>();\nconst RacerDetail: React.FC = () => (\n  <Layout\n    title={(\n      <Title>\n        <h1>DevAway</h1>\n      </Title>\n    )}\n    subTitle={<ChampionshipTitle>World Kart Championship</ChampionshipTitle>}\n  >\n    <Racer name=\"Nombre\" age={23} races={[]} picture=\"/aa\" team=\"aa\" />\n  </Layout>\n);\nexport default RacerDetail;\n","import { JsonDecoder } from 'ts.data.json';\n\nexport type Race = {\n  name: string;\n  time: string;\n};\n\nexport type Racer = {\n  _id: string;\n  picture: string;\n  age: number;\n  name: string;\n  team: string;\n  races: Array<Race>;\n};\n\nexport const RaceDecoder = JsonDecoder.object<Race>(\n  {\n    name: JsonDecoder.string,\n    time: JsonDecoder.string,\n  },\n  'Race',\n);\n\nexport const RacerDecoder = JsonDecoder.object<Racer>(\n  {\n    _id: JsonDecoder.string,\n    picture: JsonDecoder.string,\n    age: JsonDecoder.number,\n    name: JsonDecoder.string,\n    team: JsonDecoder.string,\n    races: JsonDecoder.array(RaceDecoder, 'Race'),\n  },\n  'Racer',\n);\n\nexport const RacersDecoder = JsonDecoder.array(RacerDecoder, 'Racer');\n","import { JsonDecoder } from 'ts.data.json';\nimport { Racer, RacersDecoder, RacerDecoder } from '../../domain';\n// import { normalizeErrorResponse } from '../utils';\n\nconst delay = (seconds: number) => new Promise<void>((res) => {\n  setTimeout(() => res(), seconds * 1000);\n});\n\nconst makeFetch = async <Data>(\n  origin: string,\n  resource: string,\n  decoder: JsonDecoder.Decoder<Data>,\n): Promise<Data> => {\n  try {\n    // TODO: Simulate delay to fetching\n    await delay(3);\n    const response = await fetch(`${origin}/${resource}`);\n    const json = (await response.json()) as unknown;\n    const data = decoder.decode(json);\n    if (data.isOk()) {\n      return data.value;\n    }\n\n    throw {\n      type: 'decode',\n      reason: data.error,\n    };\n  } catch (err) {\n    throw {\n      type: 'api',\n      reason: '',\n    };\n  }\n};\n\nconst makeRacerFetch = async <Data>(decoder: JsonDecoder.Decoder<Data>) => makeFetch<Data>('/sources', 'racer.json', decoder);\n\nconst getAll = async (): Promise<Array<Racer>> => makeRacerFetch<Array<Racer>>(RacersDecoder);\n\nconst getById = async (): Promise<Racer> => makeRacerFetch<Racer>(RacerDecoder);\n\nconst racer = {\n  getAll,\n  getById,\n};\n\nexport default racer;\n","import local from './local';\n\nconst services = {\n  local,\n};\n\nexport default services;\n","import racer from './racer';\n\nconst local = {\n  racer,\n};\n\nexport default local;\n","import { mergeDeepLeft } from 'ramda';\nimport { useCallback, useEffect } from 'react';\nimport { useLocalStorage } from 'react-use';\nimport services from '../../services';\nimport { Racer } from '../../domain';\n\ntype UseRankingsState = {\n  data: {\n    racers: Array<Racer>;\n  };\n  loading: {\n    racers: boolean;\n  };\n  error: {\n    racers: Nullable<string>;\n  };\n};\n\ntype UseRankingsOutput = UseRankingsState;\n\nconst INITIA_STATE: UseRankingsState = {\n  data: {\n    racers: [],\n  },\n  loading: {\n    racers: true,\n  },\n  error: {\n    racers: null,\n  },\n};\n\nconst useRankings = (): UseRankingsOutput => {\n  const [state, setState] = useLocalStorage('rankings', INITIA_STATE);\n\n  const mergeState = useCallback(\n    (newPartialState: Partial<UseRankingsState>) => setState(\n      (currState) => mergeDeepLeft(newPartialState, currState) as UseRankingsState,\n    ),\n    [setState],\n  );\n\n  useEffect(() => {\n    mergeState({ loading: INITIA_STATE.loading, error: INITIA_STATE.error });\n    services.local.racer\n      .getAll()\n      .then((racers): void => mergeState({ data: { racers }, loading: { racers: false } }))\n      .catch((err: AnyError): void => mergeState({\n        error: { racers: err.reason },\n        loading: { racers: false },\n      }));\n  }, [mergeState]);\n\n  return state;\n};\n\nexport default useRankings;\n","import React from 'react';\nimport { Layout } from 'components';\n\nimport { Racers, Title, ChampionshipTitle } from '../components';\nimport useRankings from './useRankings';\n\nconst Ranking: React.FC = () => {\n  const {\n    data: { racers },\n    loading,\n  } = useRankings();\n\n  return (\n    <Layout\n      title={(\n        <Title>\n          <h1>DevAway</h1>\n        </Title>\n      )}\n      subTitle={<ChampionshipTitle>World Kart Championship</ChampionshipTitle>}\n    >\n      <Racers\n        isLoading={loading.racers && racers.length === 0}\n        racers={racers}\n      />\n    </Layout>\n  );\n};\n\nexport default Ranking;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport NotFound from './NotFound';\nimport RacerDetail from './RacerDetail';\nimport Ranking from './Ranking';\n\nconst Scenes: React.FC = () => (\n  <Switch>\n    <Route exact path=\"/\" component={Ranking} />\n    <Route exact path=\"/racer/:id\" component={RacerDetail} />\n    <Route path=\"/\" component={NotFound} />\n  </Switch>\n);\n\nexport default Scenes;\n","import { createGlobalStyle } from '@xstyled/styled-components';\nimport { normalize } from 'styled-normalize';\n\nconst GlobalStyle = createGlobalStyle`\n    ${normalize}\n\n    * {\n        box-sizing: border-box;\n        font-family: 'Roboto', sans-serif;\n        user-select: none;\n    }\n\n    html, body, div#root{\n        min-width: 100%;\n        min-height: 100%;\n        color: text;\n        background-color: bg;\n    }\n    \n    h1 {\n        font-size: 2.5rem;\n    }\n\n    h2 {\n        font-size: 1.8rem;\n    }\n\n    h3 {\n        font-size: 1.4rem;\n    }\n\n    p, a, span, div {\n        font-size: 1rem;\n    }\n`;\n\nexport default GlobalStyle;\n","import borders from './borders';\nimport breakpoints from './breakpoints';\nimport colors from './colors';\nimport fontSizes from './fontSizes';\nimport fontWeights from './fontWeights';\nimport shadows from './shadows';\nimport sizes from './sizes';\nimport space from './space';\nimport transitions from './transitions';\nimport zIndices from './zIndices';\n\nconst values = {\n  borders,\n  breakpoints,\n  colors,\n  fontSizes,\n  fontWeights,\n  shadows,\n  sizes,\n  space,\n  transitions,\n  zIndices,\n} as const;\n\nexport type ThemeSchema = {\n  [P in keyof typeof values]: keyof typeof values[P];\n};\n\nexport default values;\n","const borders = {\n  thin: '1px solid',\n  solid: '2px solid',\n  thick: '3px solid',\n  xthick: '5px solid',\n};\n\nexport default borders;\n","const breakpoints = {\n  xs: 0,\n  sm: 576,\n  md: 768,\n  lg: 992,\n  xl: 1200,\n};\n\nexport default breakpoints;\n","const colors = {\n  text: '#000',\n  bg: '#FFF',\n  card: '#f2f2f2',\n  primary: '#ef482d',\n  foreground: '#909090',\n  foregroundBorder: '#d2d2d2',\n  gold: '#FAFAD2',\n  silver: '#C0C0C0',\n  bronze: '#cc6633',\n};\n\nexport default colors;\n","const fontSizes = {\n  0: '1rem',\n  1: '1.2rem',\n  2: '1.3rem',\n  3: '1.3rem',\n  4: '1.5rem',\n  5: '1.8rem',\n};\n\nexport default fontSizes;\n","const fontWeights = {\n  thin: '100',\n  regular: '300',\n  bold: '500',\n};\n\nexport default fontWeights;\n","const shadows = {\n  card: '0px 1px 2px #333333a3;',\n  smooth: '0px 0px 0px 4px rgba(0,0,0,0.3)',\n};\n\nexport default shadows;\n","const sizes = {\n  xxs: '4px',\n  xs: '8px',\n  sm: '16px',\n  md: '32px',\n  lg: '64px',\n  xl: '128px',\n  xxl: '256px',\n};\n\nexport default sizes;\n","const space = {\n  none: '0',\n  xxs: '1px',\n  xs: '4px',\n  sm: '8px',\n  md: '16px',\n  lg: '32px',\n  xl: '64px',\n  xxl: '128px',\n};\n\nexport default space;\n","const transitions = {\n  fast: 'all 0.25s',\n  regular: 'all 0.5s',\n  slow: 'all 1s',\n};\n\nexport default transitions;\n","const zIndices = {\n  splash: 100,\n};\n\nexport default zIndices;\n","import { ThemeProvider } from '@xstyled/styled-components';\nimport PropTypes, { InferProps } from 'prop-types';\nimport React from 'react';\n\nimport GlobalStyle from './GlobalStyle';\nimport themeValues from './values';\n\nconst themePropTypes = {\n  children: PropTypes.node.isRequired,\n};\n\ntype ThemeProps = InferProps<typeof themePropTypes>;\n\nconst Theme: React.FC<ThemeProps> = ({ children }) => (\n  <ThemeProvider theme={themeValues}>\n    <GlobalStyle />\n    {children}\n  </ThemeProvider>\n);\n\nTheme.propTypes = themePropTypes;\n\nexport default Theme;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport { Splash } from './components';\nimport Scenes from './scenes';\nimport Theme from './theme';\n\nconst App: React.FC = () => (\n  <Theme>\n    <Splash />\n    <BrowserRouter>\n      <Scenes />\n    </BrowserRouter>\n  </Theme>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n// import reportWebVitals from './reportWebVitals';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals(\n//   // eslint-disable-next-line no-console\n//   console.log,\n// );\n"],"sourceRoot":""}